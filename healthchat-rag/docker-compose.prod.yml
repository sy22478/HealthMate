version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: healthmate_postgres
    environment:
      POSTGRES_DB: healthmate
      POSTGRES_USER: healthmate_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - healthmate_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthmate_user -d healthmate"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: healthmate_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - healthmate_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HealthMate Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: healthmate_backend
    environment:
      # Database
      HEALTHMATE_POSTGRES_URI: postgresql://healthmate_user:${POSTGRES_PASSWORD}@postgres:5432/healthmate
      
      # Redis
      HEALTHMATE_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # OpenAI
      HEALTHMATE_OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Pinecone
      HEALTHMATE_PINECONE_API_KEY: ${PINECONE_API_KEY}
      HEALTHMATE_PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT}
      HEALTHMATE_PINECONE_INDEX_NAME: ${PINECONE_INDEX_NAME}
      
      # Security
      HEALTHMATE_SECRET_KEY: ${SECRET_KEY}
      HEALTHMATE_ENVIRONMENT: production
      HEALTHMATE_DEBUG: "false"
      
      # CORS
      HEALTHMATE_CORS_ALLOW_ORIGINS: ${CORS_ALLOW_ORIGINS}
      
      # Rate Limiting
      HEALTHMATE_RATE_LIMIT_ENABLED: "true"
      HEALTHMATE_RATE_LIMIT_REQUESTS_PER_MINUTE: "60"
      HEALTHMATE_RATE_LIMIT_REQUESTS_PER_HOUR: "1000"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthmate_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: healthmate_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - healthmate_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: healthmate_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - healthmate_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: healthmate_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - healthmate_network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: healthmate_celery_worker
    command: ["celery", "-A", "app.celery_app", "worker", "--loglevel=info"]
    environment:
      # Same environment variables as backend
      HEALTHMATE_POSTGRES_URI: postgresql://healthmate_user:${POSTGRES_PASSWORD}@postgres:5432/healthmate
      HEALTHMATE_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      HEALTHMATE_OPENAI_API_KEY: ${OPENAI_API_KEY}
      HEALTHMATE_PINECONE_API_KEY: ${PINECONE_API_KEY}
      HEALTHMATE_PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT}
      HEALTHMATE_PINECONE_INDEX_NAME: ${PINECONE_INDEX_NAME}
      HEALTHMATE_SECRET_KEY: ${SECRET_KEY}
      HEALTHMATE_ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthmate_network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: healthmate_celery_beat
    command: ["celery", "-A", "app.celery_app", "beat", "--loglevel=info"]
    environment:
      # Same environment variables as backend
      HEALTHMATE_POSTGRES_URI: postgresql://healthmate_user:${POSTGRES_PASSWORD}@postgres:5432/healthmate
      HEALTHMATE_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      HEALTHMATE_OPENAI_API_KEY: ${OPENAI_API_KEY}
      HEALTHMATE_PINECONE_API_KEY: ${PINECONE_API_KEY}
      HEALTHMATE_PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT}
      HEALTHMATE_PINECONE_INDEX_NAME: ${PINECONE_INDEX_NAME}
      HEALTHMATE_SECRET_KEY: ${SECRET_KEY}
      HEALTHMATE_ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healthmate_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  healthmate_network:
    driver: bridge 